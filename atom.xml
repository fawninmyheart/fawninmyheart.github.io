<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>You are my sunshine&lt;br&gt;being with you is like walking on a clear morning</title>
  
  
  <link href="https://www.fawninmyheart.top/atom.xml" rel="self"/>
  
  <link href="https://www.fawninmyheart.top/"/>
  <updated>2024-09-03T04:07:36.982Z</updated>
  <id>https://www.fawninmyheart.top/</id>
  
  <author>
    <name>Shen Hua</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用Singuarity制作Samtools容器</title>
    <link href="https://www.fawninmyheart.top/samtoolsInstall/"/>
    <id>https://www.fawninmyheart.top/samtoolsInstall/</id>
    <published>2024-09-03T02:37:02.000Z</published>
    <updated>2024-09-03T04:07:36.982Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;<a href="https://github.com/samtools/samtools">Samtools</a>是一套用于处理高通量测序数据的程序集，是生信分析中的重要软件。下面将介绍如何使用Singularity制作一个Samtools容器，方便跨系统、跨用户使用Samtools，保证生信分析环境的一致性。</p><span id="more"></span><blockquote>    <font font="Lato" size="2">本文 Singularity 基础环境为 Ubuntu 22.04 LTS。另外，Singularity 虽然可以使用 yml 文件或 def 文件直接构建新容器，不过我更喜欢的是使用沙盒模式制作新容器。沙盒模式可操作性更强，也方便解决安装过程中的各种问题。而且沙盒模式下安装软件与在Linux中安装软件的过程一致，减少了不必要的学习成本。因此沙盒模式对于偶尔制作新容器的用户会是一个更具有性价比的选择。</font></blockquote><ol>    <li>        <p>            <font font="Lato" size="3">首先下载一个Singularity基础环境，或者去<a href="https://cloud.sylabs.io/"><strong>官网</strong></a>下载一个你喜欢的基础容器：</font>            <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拉取基础Ubuntu容器</span></span><br><span class="line">singularity pull library://library/default/ubuntu</span><br></pre></td></tr></table></figure>            <font font="Lato" size="3">下载好的基础容器建议直接存起来，方便以后使用。</font>        </p>    </li>    <li>        <p>            <font font="Lato" size="3">使用基础容器生成沙盒：</font>            <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 构建沙盒容器</span></span><br><span class="line">singularity build --sandbox samtools/ ubuntu_latest.sif</span><br></pre></td></tr></table></figure>        </p>    </li>    <li>        <p>            <font font="Lato" size="3">制作一个Samtools的安装文件，这里命名为SamtoolsInstall.sh。本文使用了编译安装方法，另外还可以使用Conda直接安装Samtools：</font>            <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"><span class="comment"># 更新apt</span></span><br><span class="line">apt update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装samtools依赖项</span></span><br><span class="line">apt-get install -y zlib1g-dev</span><br><span class="line">apt-get install -y libbz2-dev</span><br><span class="line">apt install -y liblzma-dev</span><br><span class="line">apt-get install -y libncurses5-dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装工具</span></span><br><span class="line">apt install -y wget</span><br><span class="line">apt install -y bzip2</span><br><span class="line">apt-get install -y gcc</span><br><span class="line">apt-get install -y make</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载samtools</span></span><br><span class="line">wget https://github.com/samtools/samtools/releases/download/1.19/samtools-1.19.tar.bz2</span><br><span class="line"><span class="comment"># 解压samtools到/opt，/opt文件夹中可以存放第三方软件</span></span><br><span class="line">tar -jxvf samtools-1.19.tar.bz2 -C /opt</span><br><span class="line"><span class="comment"># 进入samtools文件夹</span></span><br><span class="line"><span class="built_in">cd</span> /opt/samtools-1.19</span><br><span class="line"><span class="comment"># 生成Makefile。configure命令会检查系统的库、头文件、依赖关系和其他必要的信息，然后生成一个Makefile</span></span><br><span class="line">./configure --prefix=/opt/samtools-1.19</span><br><span class="line"><span class="comment"># 编译</span></span><br><span class="line">make</span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">make install</span><br><span class="line"><span class="comment"># 添加环境变量到singularity容器</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PATH=&quot;/opt/samtools-1.19/bin:$PATH&quot;&#x27;</span> &gt;&gt; /.singularity.d/env/10-docker2singularity.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除不必要的软件和缓存文件，精简singularity容器大小</span></span><br><span class="line">apt remove -y wget</span><br><span class="line">apt remove -y bzip2</span><br><span class="line">apt-get remove -y gcc</span><br><span class="line">apt-get remove -y make</span><br><span class="line">apt-get autoremove -y</span><br><span class="line"><span class="built_in">rm</span> -rf /var/lib/apt/lists/*</span><br></pre></td></tr></table></figure>            <font font="Lato" size="3">对于使用Conda的用户，Conda安装Samtools会是一个更好的选择。这里由于要制作Singularity容器，为了尽量减少最终容器的体积，才会选择编译安装。上述命令对于在Ubuntu上编译安装Samtools也是完全适用的，不过最后的删除软件和缓存文件的命令就不要执行了。另外，添加Samtools到环境变量的方法也需要调整为常规Ubuntu方法。</font>        </p>    </li>    <li>        <p>            <font font="Lato" size="3">调用沙盒执行SantoolsInstall.sh：</font>            <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在沙盒内安装Samtools</span></span><br><span class="line">singularity <span class="built_in">exec</span> --writable samtools/ sh SamtoolsInstall.sh</span><br><span class="line"><span class="comment"># 测试Samtools</span></span><br><span class="line">singularity <span class="built_in">exec</span> samtools/ samtools --<span class="built_in">help</span></span><br></pre></td></tr></table></figure>            <font font="Lato" size="3">还可以采用shell方式调用沙盒，这样就可以像操作Linux一样在沙盒内操作：</font>            <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入沙盒</span></span><br><span class="line">singularity shell --writable samtools/</span><br></pre></td></tr></table></figure>        </p>    </li>    <li>        <p>            <font font="Lato" size="3">将沙盒打包为静态SIF文件：</font>            <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成静态SIF文件</span></span><br><span class="line">singularity build samtools.sif samtools/</span><br><span class="line"><span class="comment"># 测试Samtools</span></span><br><span class="line">singularity <span class="built_in">exec</span> samtools.sif samtools --<span class="built_in">help</span></span><br></pre></td></tr></table></figure>        </p>    </li></ol><p>    <font font="Lato" size="3">至此，Samtools容器就已经制作好啦，可以使用静态SIF文件执行Samtools，也可以将静态SIF分享到需要的地方。</font></p><!-- comment --><script src="https://giscus.app/client.js"        data-repo="fawninmyheart/blog_comment"        data-repo-id="R_kgDOMh0eTw"        data-category="Announcements"        data-category-id="DIC_kwDOMh0eT84Chh6Y"        data-mapping="pathname"        data-strict="0"        data-reactions-enabled="1"        data-emit-metadata="0"        data-input-position="top"        data-theme="preferred_color_scheme"        data-lang="zh-CN"        crossorigin="anonymous"        async></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;&amp;emsp;&amp;emsp;&lt;a href=&quot;https://github.com/samtools/samtools&quot;&gt;Samtools&lt;/a&gt;是一套用于处理高通量测序数据的程序集，是生信分析中的重要软件。下面将介绍如何使用Singularity制作一个Samtools容器，方便跨系统、跨用户使用Samtools，保证生信分析环境的一致性。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Linux" scheme="https://www.fawninmyheart.top/tags/Linux/"/>
    
    <category term="samtools" scheme="https://www.fawninmyheart.top/tags/samtools/"/>
    
    <category term="Singularity" scheme="https://www.fawninmyheart.top/tags/Singularity/"/>
    
  </entry>
  
  <entry>
    <title>在Linux上使用IGV生成基因组可视化图</title>
    <link href="https://www.fawninmyheart.top/IGV-visual-linux/"/>
    <id>https://www.fawninmyheart.top/IGV-visual-linux/</id>
    <published>2024-08-08T11:58:48.000Z</published>
    <updated>2024-08-21T05:48:30.539Z</updated>
    
    <content type="html"><![CDATA[<img src="/IGV-visual-linux/OPN1LW.png" title="opn1lw可视化" alt="图片加载失败" style="zoom:50%;" /><p>&emsp;&emsp;<a href="https://www.igv.org/">IGV</a> (Itegrative Genomics Viewer)是一款功能强大的综合性基因组学可视化工具，能够将基因组的变异情况进行可视化，因此广泛应用于基因组学的研究中。IGV有着良好的图形界面，在window系统上操作十分便利。然而，当我们需要批量处理生信数据时，Linux系统是一个更好的选择。不幸的是，IGV在Linux上的使用并不友好。本文记录了在Linux上使用IGV的具体方法。</p><span id="more"></span><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a><font font="Lato" size = 6>环境配置</font></h2><h3 id="安装IGV"><a href="#安装IGV" class="headerlink" title="安装IGV"></a><p style="background-color: #555555; color:white"><font font="Lato" size = 5>安装IGV</font></p></h3><p>    <font font="Lato" size="3">        不同版本的IGV依赖于不同版本的Java，因此我们需要先确定要安装的IGV版本，再安装对应版本的Java。    </font></p><p>    <font font="Lato" size="3">        我们可以从IGV的<a target="_blank" rel="noopener" href="https://igv.org/doc/desktop/#DownloadPage/">Download</a>页面下载IGV安装包。由于我们是在Linux中运行IGV，所以可以选择下载<code>Command line IGV and igvtools for all platforms (Separate Java 17 required)</code>到自己在服务器上的工作目录。解压安装包后直接运行安装包内的igv.sh文件即可运行IGV。    </font>    <font font="Lato" size="3">        <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载IGV安装包</span></span><br><span class="line">wget https://data.broadinstitute.org/igv/projects/downloads/2.18/IGV_2.18.0.zip</span><br><span class="line"><span class="comment"># 解压IGV安装包</span></span><br><span class="line">unzip IGV_2.18.0.zip</span><br><span class="line"><span class="comment"># 运行IGV（需要正确安装了指定版本的Java后才能正常运行）</span></span><br><span class="line"><span class="built_in">cd</span> IGV_2.18.0</span><br><span class="line">igv.sh</span><br></pre></td></tr></table></figure>    </font></p><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a><p style="background-color: #555555; color:white"><font font="Lato" size = 5>安装依赖</font></p></h3><p>    <font font="Lato" size="3">        IGV的运行依赖于指定版本的Java。另外，使用IGV生成基因组可视化图的过程中还需要调用图形界面（X Window服务器）。在Linux中可以使用Xvbf (X Virtual Frame Buffer) 虚拟一个X Window服务器供IGV使用。最后，由于IGV直出的图还是不太符合我的需求，因此我还安装了imagemagick，用来裁剪图片。    </font></p><h4 id="创建Singularity容器"><a href="#创建Singularity容器" class="headerlink" title=" 创建Singularity容器 "></a><font font="Lato" size=4> 创建Singularity容器 </font></h4><p>    <font font="Lato" size=3>        由于IGV指定了Java版本，不利于我们在Linux中进行版本管理。因此本文中使用了Singualrity创建了一个独立的Linux容器供IGV使用。这样做的另一个好处就是可以很方便的实现系统迁移。只要把这个Linux容器复制到另一个安装了Singularity的Linux系统中，就可以直接在新的Linux系统中运行IGV。    </font></p><blockquote>    <p>        <font font="Lato" size=2>            <i><a target="_blank" rel="noopener" href="https://sylabs.io/docs/">Singularity</a>是劳伦斯伯克利国家实验室专门为大规模、跨节点HPC和DL工作负载而开发的容器化技术,具备轻量级、快速部署、方便迁移等优势，且支持从Docker镜像格式转换为Singularity镜像格式。</i>        </font>    </p></blockquote><blockquote>    <p>        <font font="Lato" size=2>            <i>用不用Singularity都可以，本文使用只是方便我管理运行环境而已。至于Singularity的安装，大家可以自行搜索教程。我以后也会写一个安装教程，到时候再把链接贴到这里。</i>        </font>    </p></blockquote><ol>    <li>        <font font="Lato" size=3>下载Singularity基础容器</font>        <p>            <font font="Lato" size="3">                首先需要一个Linux基础容器 (base images)。可以去<a target="_blank" rel="noopener" href="https://cloud.sylabs.io/" ><strong>这个页面</strong></a>下载官方的Linux基础容器，也可以用下方的命令直接拉取一个合适的基础容器：            </font>            <font font="Lato" size="3">                <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从Singularity拉取一个基础Ubuntu容器</span></span><br><span class="line">[root@comput1 ~/example]$ singularity pull library://library/default/ubuntu</span><br><span class="line">INFO:    Downloading library image</span><br><span class="line">28.44 MiB / 28.44 MiB [================================] 100.00% 2.66 MiB/s 10s</span><br><span class="line">WARNING: unable to verify container: ubuntu_latest.sif</span><br><span class="line">WARNING: Skipping container verification</span><br><span class="line">[root@comput1 ~/example]$ <span class="built_in">ls</span></span><br><span class="line">ubuntu_latest.sif</span><br></pre></td></tr></table></figure>            </font>        </p>    </li>    <li>        <font font="Lato" size="3">创建Singularity沙盒</font>        <p>            <font font="Lato" size="3">                Singularity拉取下来的容器是一个只读格式的sif文件。为了在里面安装软件，需要将其转换成一个沙盒类型的文件夹（IGV_env）：            </font>            <font font="Lato" size="3">                <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将sif文件转换为沙盒</span></span><br><span class="line">[root@comput1 ~/example]$ singularity build --sandbox IGV_env/ ubuntu_latest.sif</span><br><span class="line">INFO:    Starting build...</span><br><span class="line">INFO:    Creating sandbox directory...</span><br><span class="line">INFO:    Build complete: IGV_env/</span><br><span class="line">[root@comput1 ~/example]$ <span class="built_in">ls</span></span><br><span class="line">IGV_env  ubuntu_latest.sif</span><br></pre></td></tr></table></figure>            </font>        </p>    </li>    <li>        <font font="Lato" size="3">配置沙盒内环境</font>        <p>            <font font="Lato" size="3">                现在我们可以进去沙盒，并在其内部安装我们需要的软件：            </font>            <font font="Lato" size="3">                <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以可写方式进入沙盒</span></span><br><span class="line">[root@comput1 ~/example]$ singularity shell --writable IGV_env/</span><br><span class="line">Singularity&gt; </span><br><span class="line">Singularity&gt; </span><br><span class="line"><span class="comment"># 更新apt</span></span><br><span class="line">Singularity&gt; apt-get update</span><br><span class="line"><span class="comment"># 安装 Java 17（本次使用的 IGV 所指定的 Java 版本）</span></span><br><span class="line">Singularity&gt; apt install -y openjdk-17-jdk</span><br><span class="line"><span class="comment"># 安装 Xvfb</span></span><br><span class="line">Singularity&gt; apt-get install -y xvfb</span><br><span class="line"><span class="comment"># 安装 imagemagick</span></span><br><span class="line">Singularity&gt; apt-get install -y imagemagick</span><br><span class="line"><span class="comment"># 退出沙盒</span></span><br><span class="line">Singularity&gt; <span class="built_in">exit</span></span><br></pre></td></tr></table></figure>            </font>        </p>    </li>    <li>        <font font="Lato" size="3">打包沙盒为新的只读sif文件</font>        <p>            <font font="Lato" size="3">                配置好内部环境的沙盒可以重新打包为只读形式的sif文件，更加安全且方便移植：            </font>            <font font="Lato" size="3">                <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将sif文件转换为沙盒</span></span><br><span class="line">[root@comput1 ~/example]$ singularity build IGV_env.sif IGV_env/</span><br><span class="line">INFO:    Starting build...</span><br><span class="line">INFO:    Creating SIF file...</span><br><span class="line">INFO:    Build complete: IGV_env.sif</span><br><span class="line">[root@comput1 ~/example]$ <span class="built_in">ls</span></span><br><span class="line">IGV_env  IGV_env.sif  ubuntu_latest.sif</span><br></pre></td></tr></table></figure>            </font>        </p>    </li></ol><blockquote>    <p>        <font font="Lato" size="3">            如果你选择按照上述方式成功配置了一个Singularity容器，那你现在就可以跳转到<a href="#生成基因组可视化图"><strong>生成基因组可视化图</strong></a>部分。如果你在Singularity内安装软件时出现问题，可以参考下面几个小章节的内容。如果你不打算使用Singularity，那么你就需要参考下面几个小章节的内容，在你的Linux系统上安装好IGV需要的软件。        </font>    </p></blockquote><h4 id="安装Java"><a href="#安装Java" class="headerlink" title=" 安装Java "></a><font font="Lato" size=4> 安装Java </font></h4><ol>    <li>        <font font="Lato" size="3">使用包管理器安装Java</font>        <p>            <font font="Lato" size="3">                IGV的运行依赖于指定版本的Java，我们需要根据自己的IGV版本安装对应版本的Java。我们可以使用以下命令在Linux上安装Java：            </font>            <font font="Lato" size="3">                <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br><span class="line"><span class="comment"># 查看apt提供了的Java版本</span></span><br><span class="line">apt search openjdk | grep -E <span class="string">&#x27;openjdk-.*-jdk/&#x27;</span></span><br><span class="line"><span class="comment"># 本文中安装的是Java17</span></span><br><span class="line">apt install -y openjdk-17-jdk</span><br><span class="line"><span class="comment"># 查看Java版本</span></span><br><span class="line">java --version</span><br></pre></td></tr></table></figure>            </font>        </p>    </li>    <li>        <font font="Lato" size=3>手动安装Java</font>        <p>            <font font="Lato" size="3">                有时候由于网络原因，可能会导致Java安装失败。这种时候可以挂梯子，也可以换一个时间再来安装，还可以选择手动安装。前往<a target="_blank" rel="noopener" href="https://www.oracle.com/cn/java/technologies/downloads/">Oracle JDK下载页面</a>下载需要的Java，或者使用wget直接下载指定版本的Java：            </font>            <font font="Lato" size="3">                <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载Java安装包</span></span><br><span class="line">wget https://download.oracle.com/java/17/latest/jdk-17_linux-x64_bin.tar.gz</span><br><span class="line"><span class="comment"># 新建一个安装路径</span></span><br><span class="line"><span class="built_in">mkdir</span> /etc/java-17-openjdk/</span><br><span class="line"><span class="comment"># 将Java安装包解压到安装路径</span></span><br><span class="line">tar -xvf jdk-17_linux-x64_bin.tar.gz -C /etc/java-17-openjdk/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将Java添加进环境变量（临时）</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/etc/java-17-openjdk/jdk-17.0.12/</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin</span><br></pre></td></tr></table></figure>            </font>        </p>    </li></ol><h4 id="安装Xvbf"><a href="#安装Xvbf" class="headerlink" title=" 安装Xvbf "></a><font font="Lato" size=4> 安装Xvbf </font></h4><p>    <font font="Lato" size=3>        使用IGV生成基因组可视化图的时候需要调用图形界面，但是Linux默认是不提供图形界面的，因此我们使用IGV生成可视化图的时候会报错。遇到这种情况时，我们一般不会特地去安装一个图形界面，而是选择使用Xvfb来创建一个虚拟图形界面供IGV使用。    </font>    <p>        <blockquote>            <font font="Lato" size="2">                Xvfb(X Virtual Frame Buffer)是基于X Window的虚拟显示服务器，可以在没有物理显卡图形界面和人机交互界面的情况下，运行X Window相关应用程序。它模拟了一个完整的X Window系统，包括显示和输入设备，但一切都是在内存中进行处理，没有显示器和键盘。这使得测试和调试GUI应用程序变得更加容易和自动化。            </font>        </blockquote>    </p>    <font font="Lato" size=3>        我们可以使用以下命令安装Xvfb：    </font>    <font font="Lato" size=3>        <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装Xvfb</span></span><br><span class="line">apt-get install -y Xvfb</span><br><span class="line"><span class="comment"># 运行Xvfb (Ctrl+C关闭服务)</span></span><br><span class="line">Xvfb</span><br></pre></td></tr></table></figure>    </font>    <font font="Lato" size=3>        实际应用时，我们可以使用Xvfb提供的一个shell脚本调用Xvfb。xvfb-run是Xvfb提供的一个Shell脚本，它可以自动启动和停止 Xvfb ，并将 DISPLAY 环境变量设为正确的值，使用它可以简化启动过程的步骤。使用时只需在需要启动的命令前加上 xvfb-run：    </font>    <font font="Lato" size=3>        <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用xvfb-run启动需要调用图形界面的软件</span></span><br><span class="line">xvfb-run -a --server-args=<span class="string">&quot;-screen 0 1280x800x24 -nolisten tcp&quot;</span> igv.sh --batch Batch_scripts_example.txt</span><br></pre></td></tr></table></figure>    </font></p><h4 id="安装Imagemagick"><a href="#安装Imagemagick" class="headerlink" title=" 安装Imagemagick "></a><font font="Lato" size=4> 安装Imagemagick </font></h4><p>    <font font="Lato" size=3>        可能是我还没完全摸透，或者IGV本身存在一些bug，总之IGV出的可视化图并没有完全满足我的需求。因此本文中还安装了Imagemagick，用于对IGV绘制的可视化图进行一定程度的裁剪。    </font>    <p>        <blockquote>            <font font="Lato" size=2>            <a target="_blank" rel="noopener" href="http://www.imagemagick.org/">Imagemagick</a>是一款强大的图像处理软件，它可以用于创建、编辑、合并和转换图像。它支持超过200种图像格式，并且提供了丰富的功能，包括图像缩放、旋转、裁剪、加水印、添加特效等。ImageMagick还支持批量处理图像，可以通过命令行或者编程接口进行调用。它是一款开源软件，可以在多个操作系统上运行，包括Windows、Linux、Mac等。            </font>        </blockquote>    </p>    <font font="Lato" size=3>使用以下命令安装Imagemagick：</font>    <font font="Lato" size=3>        <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 imagemagick</span></span><br><span class="line">apt-get install -y imagemagick</span><br><span class="line"><span class="comment"># 裁剪图片 （-crop后的参数为：图片宽度x图片高度+起始位点横坐标+起始位点纵坐标。其中图片左上角的横纵坐标为(0,0)）</span></span><br><span class="line">convert example.raw.png -crop 968x485+167+0 example.png</span><br></pre></td></tr></table></figure>    </font></p><h4 id="切换apt源"><a href="#切换apt源" class="headerlink" title=" 切换apt源 "></a><font font="Lato" size=4> 切换apt源 </font></h4><p>    <font font="Lato" size="3">        由于国内的网络原因，使用apt安装上述软件有可能会失败。这个时候可以考虑使用国内镜像替换掉apt的源：    </font>    <p>        <blockquote>            <font font="Lato" size="2">                <i>这个方法不适用于Java，国内的镜像提供的Java版本太少了，可以试试手动安装Java。不过另外两个软件安装失败时可以尝试这种方法。</i>            </font>        </blockquote>    </p>    <font font="Lato" size="3">        <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 备份源文件</span></span><br><span class="line"><span class="built_in">cp</span> /etc/apt/sources.list /etc/apt/sources.list.bak</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换源，下面三个源任选一个执行</span></span><br><span class="line"><span class="comment">## 中科大源</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;</span></span><br><span class="line"><span class="string"># 默认注释了源码仓库，如有需要可自行取消注释</span></span><br><span class="line"><span class="string">deb https://mirrors.ustc.edu.cn/ubuntu/ focal main restricted universe multiverse</span></span><br><span class="line"><span class="string"># deb-src https://mirrors.ustc.edu.cn/ubuntu/ focal main restricted universe multiverse</span></span><br><span class="line"><span class="string">deb https://mirrors.ustc.edu.cn/ubuntu/ focal-security main restricted universe multiverse</span></span><br><span class="line"><span class="string"># deb-src https://mirrors.ustc.edu.cn/ubuntu/ focal-security main restricted universe multiverse</span></span><br><span class="line"><span class="string">deb https://mirrors.ustc.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span></span><br><span class="line"><span class="string"># deb-src https://mirrors.ustc.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span></span><br><span class="line"><span class="string">deb https://mirrors.ustc.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span></span><br><span class="line"><span class="string"># deb-src https://mirrors.ustc.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span></span><br><span class="line"><span class="string"># 预发布软件源，不建议启用</span></span><br><span class="line"><span class="string"># deb https://mirrors.ustc.edu.cn/ubuntu/ focal-proposed main restricted universe multiverse</span></span><br><span class="line"><span class="string"># deb-src https://mirrors.ustc.edu.cn/ubuntu/ focal-proposed main restricted universe multivers</span></span><br><span class="line"><span class="string">&#x27;</span> &gt; /etc/apt/sources.list</span><br><span class="line"><span class="comment">## 更新源</span></span><br><span class="line">apt-get update</span><br><span class="line"></span><br><span class="line"><span class="comment">## 阿里源</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;</span></span><br><span class="line"><span class="string">deb http://mirrors.aliyun.com/ubuntu/ xenial main</span></span><br><span class="line"><span class="string"># deb-src http://mirrors.aliyun.com/ubuntu/ xenial main</span></span><br><span class="line"><span class="string">deb http://mirrors.aliyun.com/ubuntu/ xenial-updates main</span></span><br><span class="line"><span class="string"># deb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main</span></span><br><span class="line"><span class="string">deb http://mirrors.aliyun.com/ubuntu/ xenial universe</span></span><br><span class="line"><span class="string"># deb-src http://mirrors.aliyun.com/ubuntu/ xenial universe</span></span><br><span class="line"><span class="string">deb http://mirrors.aliyun.com/ubuntu/ xenial-updates universe</span></span><br><span class="line"><span class="string"># deb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates universe</span></span><br><span class="line"><span class="string">deb http://mirrors.aliyun.com/ubuntu/ xenial-security main</span></span><br><span class="line"><span class="string"># deb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main</span></span><br><span class="line"><span class="string">deb http://mirrors.aliyun.com/ubuntu/ xenial-security universe</span></span><br><span class="line"><span class="string"># deb-src http://mirrors.aliyun.com/ubuntu/ xenial-security universe</span></span><br><span class="line"><span class="string">&#x27;</span> &gt; /etc/apt/sources.list</span><br><span class="line"><span class="comment">## 更新源</span></span><br><span class="line">apt-get update</span><br><span class="line"></span><br><span class="line"><span class="comment">## 清华源</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;</span></span><br><span class="line"><span class="string"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span></span><br><span class="line"><span class="string">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial main restricted universe multiverse</span></span><br><span class="line"><span class="string"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial main restricted universe multiverse</span></span><br><span class="line"><span class="string">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-updates main restricted universe multiverse</span></span><br><span class="line"><span class="string"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-updates main restricted universe multiverse</span></span><br><span class="line"><span class="string">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse</span></span><br><span class="line"><span class="string"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse</span></span><br><span class="line"><span class="string">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-security main restricted universe multiverse</span></span><br><span class="line"><span class="string"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-security main restricted universe multiverse</span></span><br><span class="line"><span class="string">&#x27;</span> &gt; /etc/apt/sources.list</span><br><span class="line"><span class="comment">## 更新源</span></span><br><span class="line">apt-get update</span><br></pre></td></tr></table></figure>    </font>    <font font="Lato" size="3">        切换源之后再尝试使用apt安装需要的软件。    </font></p><h2 id="生成基因组可视化图"><a href="#生成基因组可视化图" class="headerlink" title="生成基因组可视化图"></a><font font="Lato" size = 6>生成基因组可视化图</font></h2><p>    <font font="Lato" size = 3>        在Linux上使用IGV生成基因组可视化图的过程实际上是利用了IGV提供的 <code>run batch script</code> 功能。如果你在Windows系统上使用过IGV，就可以看出来 <code>Batch Script</code> 其实模拟了用户在图形界面中手动生成基因组可视化图的过程。用户的每一次操作都被简化成了一个<a target="_blank" rel="noopener" href="https://igv.org/doc/desktop/#UserGuide/tools/batch/"><strong>命令语句</strong></a>。这一系列命令语句合并在一起形成了一个 <code>Batch Script</code> 文件，指导了IGV要如何生成基因组可视化图。    </font></p><h3 id="制作-Batch-Script-文件"><a href="#制作-Batch-Script-文件" class="headerlink" title="制作 Batch Script 文件"></a><p style="background-color: #555555; color:white"><font font="Lato" size = 5>制作 Batch Script 文件</font></p></h3><p>    <font font="Lato" size = 3>        下面的 <code>Batch Script</code> 文件内容可以用于生成OPN1LW区域的基因组可视化图：    </font>    <font font="Lato" size = 3>        <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">genome hg19</span><br><span class="line">load ./testSample.deduped.bam name=testSample</span><br><span class="line">goto chrX:153,409,243-153,425,345</span><br><span class="line"><span class="built_in">sort</span> position</span><br><span class="line">collapse</span><br><span class="line">maxPanelHeight 300</span><br><span class="line">preference NAME_PANEL_WIDTH 0</span><br><span class="line">snapshotDirectory ./mySnapshotDirectory</span><br><span class="line">snapshot testSample.OPN1LW.raw.png</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>    </font>    <font font="Lato" size = 3>        这里，IGV会自动下载并加载hg19的参考基因组信息，但是大多数情况下将参考基因组信息存储在本地服务器上是一个更稳定的选择。我们可以将IGV自动下载的参考基因组文件保存在本地服务器上，然后通过一个 <code>.genome</code> 文件指导IGV如何在本地服务器上加载参考基因组文件。    </font>    <p>        <blockquote>            <font font="Lato" size=2>                IGV自动下载hg19的参考基因组文件时，会给出一个 <code>.json</code> 文件的超链接。可以将这个文件用wget下载下来，里面有hg19所需要的参考基因组文件的超链接。可以使用这些超链接把基因组文件下载到本地。            </font>        </blockquote>    </p>    <p>        <font font="Lato" size = 3>            目前我还没有找到在linux上制作 <code>.genome</code> 文件的方法，因此这一步是在Windows下完成的。首先安装Windows版的IGV，在IGV的<a target="_blank" rel="noopener" href="https://igv.org/doc/desktop/#DownloadPage/">Download</a>页面下载并安装 <code>IGV for Windows (Java included)</code> 即可。然后把本地服务器上下载的参考基因组信息传到Windows上，其中基因组序列文件是必要的，其他为可选，如CytoBand和alias文件。接下来打开IGV，在菜单栏中依次点击<code>Genomes</code>-><code>Create .genome file...</code>。填写好基因组信息和文件路径后点击OK（<i>Gene空着即可，把CytoBand和alias填上就行，当然，不填也无所谓，只有序列文件是必选项</i>）。最后选择 <code>.genome</code> 文件的保存位置即可。这里要<strong>注意</strong>一下，最好把 <code>.genome</code> 文件和参考基因组文件全都保到同一路径下，这样 <code>.genome</code> 文件就会直接记录参考基因组文件的不含路径信息的文件名，否则，会记录进去一部分路径信息，不利于我们将 <code>.genome</code> 文件上传到Linux中使用。通过如上方式制作的 <code>.genome</code> 文件会在 <code>.genome</code> 文件所在的目录下寻找基因组信息文件，因此把 <code>.genome</code> 文件上传到Linux中存放基因组信息文件的路径下后，IGV就可以通过 <code>.genome</code> 文件索引到对应的基因组信息文件。        </font>    </p>    <font font="Lato" size = 3>        为了加载本地的 <code>.genome</code> 文件，我们需要修改一下 <code>Batch Script</code> 文件。值得注意的是，我们需要单独加载一下 <code>ncbiRefSeq.txt.gz</code> 文件，这个是基因组可视化图最下方的基因信息。因为我没有摸清楚生成 <code>.genome</code> 文件时需要的Gene文件是何种格式，所以最后以这种方式手动添加了基因文件：    </font>    <font font="Lato" size = 3>        <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">genome ./genome/hg19/hg19.genome</span><br><span class="line">load ./genome/hg19/ncbiRefSeq.txt.gz name=Gene</span><br><span class="line">load ./testSample.deduped.bam name=testSample</span><br><span class="line">goto chrX:153,409,243-153,425,345</span><br><span class="line"><span class="built_in">sort</span> position</span><br><span class="line">collapse</span><br><span class="line">maxPanelHeight 300</span><br><span class="line">preference NAME_PANEL_WIDTH 0</span><br><span class="line">snapshotDirectory ./mySnapshotDirectory</span><br><span class="line">snapshot testSample.OPN1LW.raw.png</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>    </font></p><h3 id="运行IGV"><a href="#运行IGV" class="headerlink" title="运行IGV"></a><p style="background-color: #555555; color:white"><font font="Lato" size = 5>运行IGV</font></p></h3><font font="Lato" size="3">    <p>        可以制作一个shell文件（run.sh），便于我们使用前面制作的Singularity容器运行IGV：    </p>    <p>        <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果使用了手动方式安装的Java，则取消掉下面两行的注释，将Java添加到临时环境变量中</span></span><br><span class="line"><span class="comment"># export JAVA_HOME=/etc/java-17-openjdk/jdk-17.0.12/</span></span><br><span class="line"><span class="comment"># export PATH=$PATH:$JAVA_HOME/bin</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用Xvfb运行IGV生成IGV可视化图。IGV会根据batch文件中指定的命令生成基因组可视化图</span></span><br><span class="line">xvfb-run -a --server-args=<span class="string">&quot;-screen 0 2560x720x24 -nolisten tcp&quot;</span> /root/shenh/singularity/IGV/IGV_2.18.0/igv.sh --batch ./Batch_script.txt</span><br><span class="line"><span class="comment"># 裁剪IGV生成的基因组可视化图</span></span><br><span class="line">convert ./mySnapshotDirectory/testSample.OPN1LW.raw.png -crop 968x485+167+0 ./mySnapshotDirectory/testSample.OPN1LW.png</span><br></pre></td></tr></table></figure>    </p>    <blockquote>        <font font="Lato" size="2"><p><i>实际上 <code>Batch Script</code> 文件中的 <code>preference NAME_PANEL_WIDTH 0</code> 命令就应该把可视化图最左侧的 <code>Name Panel</code> 栏删除了的，可是不知道为什么没有生效。最后不得不使用Imagemagick裁剪掉左侧区域。</i></p></font>    </blockquote>    <p>对于使用了Singularity的用户，可以使用下面的命令生成基因组可视化图：</p>    <p>        <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">singularity <span class="built_in">exec</span> IGV_env.sif sh run.sh</span><br></pre></td></tr></table></figure>    </p>    <p>对于未使用Singularity的用户，去除Singularity相关命令即可：</p>    <p>        <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh run.sh</span><br></pre></td></tr></table></figure>    </p></font><h2 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font font="Lato" size = 6>未解决的问题</font></h2><ol>    <li>        <p>            <font font="Lato" size="3">                当我把制作好的IGV_env.sif文件移植到生产端的服务器上运行时，过程中总会产生如下错误：            </font>            <font font="Lato" size="3">                <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(process:45461): dconf-CRITICAL **: 11:49:23.924: unable to create directory <span class="string">&#x27;/run/user/1019/dconf&#x27;</span>: Read-only file system.  dconf will not work properly.</span><br></pre></td></tr></table></figure>            </font>            <font font="Lato" size="3">                目前来看，这个错误不影响出结果。尝试定位原因发现生产端服务器的Xvfb服务默认就已经被root用户开启了，而测试用的本地服务器只有在测试IGV是才会打开Xvfb。不知道是不是这个原因导致的上述错误。            </font>            <font font="Lato" size="3">                <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在生产端服务器尝试运行Xvfb，发现已经被管理员运行了</span></span><br><span class="line">Singularity&gt; Xvfb</span><br><span class="line">(EE) </span><br><span class="line">Fatal server error:</span><br><span class="line">(EE) Server is already active <span class="keyword">for</span> display 0</span><br><span class="line">        If this server is no longer running, remove /tmp/.X0-lock</span><br><span class="line">        and start again.</span><br><span class="line">(EE)</span><br><span class="line">Singularity&gt; <span class="built_in">ls</span> -l /tmp/.X0-lock</span><br><span class="line">-r--r--r--. 1 root root 11 May 27 19:18 /tmp/.X0-lock</span><br></pre></td></tr></table></figure>            </font>        </p>    </li></ol><!-- comment --><script src="https://giscus.app/client.js"        data-repo="fawninmyheart/blog_comment"        data-repo-id="R_kgDOMh0eTw"        data-category="Announcements"        data-category-id="DIC_kwDOMh0eT84Chh6Y"        data-mapping="pathname"        data-strict="0"        data-reactions-enabled="1"        data-emit-metadata="0"        data-input-position="top"        data-theme="preferred_color_scheme"        data-lang="zh-CN"        crossorigin="anonymous"        async></script>]]></content>
    
    
    <summary type="html">&lt;img src=&quot;/IGV-visual-linux/OPN1LW.png&quot; title=&quot;opn1lw可视化&quot; alt=&quot;图片加载失败&quot; style=&quot;zoom:50%;&quot; /&gt;

&lt;p&gt;&amp;emsp;&amp;emsp;&lt;a href=&quot;https://www.igv.org/&quot;&gt;IGV&lt;/a&gt; (Itegrative Genomics Viewer)是一款功能强大的综合性基因组学可视化工具，能够将基因组的变异情况进行可视化，因此广泛应用于基因组学的研究中。IGV有着良好的图形界面，在window系统上操作十分便利。然而，当我们需要批量处理生信数据时，Linux系统是一个更好的选择。不幸的是，IGV在Linux上的使用并不友好。本文记录了在Linux上使用IGV的具体方法。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Linux" scheme="https://www.fawninmyheart.top/tags/Linux/"/>
    
    <category term="Singularity" scheme="https://www.fawninmyheart.top/tags/Singularity/"/>
    
    <category term="IGV" scheme="https://www.fawninmyheart.top/tags/IGV/"/>
    
    <category term="Genome Visualization" scheme="https://www.fawninmyheart.top/tags/Genome-Visualization/"/>
    
  </entry>
  
  <entry>
    <title>Conda环境的使用</title>
    <link href="https://www.fawninmyheart.top/conda/"/>
    <id>https://www.fawninmyheart.top/conda/</id>
    <published>2024-07-18T01:41:43.000Z</published>
    <updated>2024-08-19T05:26:57.681Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;Conda是一个开源的软件包管理系统和环境管理系统。使用Conda有利于我们对安装的软件进行版本管理。</p><span id="more"></span><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><blockquote><p>使用下方命令下载conda安装脚本并执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget -c https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh</span><br><span class="line"><span class="built_in">chmod</span> 777 Miniconda3-latest-Linux-x86_64.sh</span><br><span class="line">sh Miniconda3-latest-Linux-x86_64.sh</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>添加conda到环境变量，并生效；PATH路径就是使用wget的路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=/home/ubuntu/shanghai/conda</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>输入conda查看是否安装成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># test conda</span></span><br><span class="line">conda</span><br></pre></td></tr></table></figure></blockquote><h3 id="conda配置"><a href="#conda配置" class="headerlink" title="conda配置"></a>conda配置</h3><blockquote><p>配置conda使用的channels</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># config channels</span></span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/bioconda/</span><br><span class="line">conda config --<span class="built_in">set</span> show_channel_urls <span class="built_in">yes</span> </span><br><span class="line">conda config --get channels</span><br></pre></td></tr></table></figure></blockquote><h3 id="在shell脚本中使用conda环境"><a href="#在shell脚本中使用conda环境" class="headerlink" title="在shell脚本中使用conda环境"></a>在shell脚本中使用conda环境</h3><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /datapool/home/shenh/miniconda3/etc/profile.d/conda.sh</span><br><span class="line">conda activate snakemake</span><br><span class="line"></span><br><span class="line">snakemake -h</span><br></pre></td></tr></table></figure></blockquote><h3 id="常用conda命令"><a href="#常用conda命令" class="headerlink" title="常用conda命令"></a>常用conda命令</h3><h6 id="新建conda环境"><a href="#新建conda环境" class="headerlink" title="新建conda环境"></a>新建conda环境</h6><blockquote><p>可以使用下方的命令新建conda环境。同时还可以额外指定新环境的conda版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create --name myenv python=3.8</span><br></pre></td></tr></table></figure></blockquote><h6 id="查看conda环境"><a href="#查看conda环境" class="headerlink" title="查看conda环境"></a>查看conda环境</h6><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda <span class="built_in">env</span> list</span><br></pre></td></tr></table></figure></blockquote><h6 id="删除conda环境"><a href="#删除conda环境" class="headerlink" title="删除conda环境"></a>删除conda环境</h6><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda remove --name myenv --all</span><br></pre></td></tr></table></figure></blockquote><!-- comment --><script src="https://giscus.app/client.js"        data-repo="fawninmyheart/blog_comment"        data-repo-id="R_kgDOMh0eTw"        data-category="Announcements"        data-category-id="DIC_kwDOMh0eT84Chh6Y"        data-mapping="pathname"        data-strict="0"        data-reactions-enabled="1"        data-emit-metadata="0"        data-input-position="top"        data-theme="preferred_color_scheme"        data-lang="zh-CN"        crossorigin="anonymous"        async></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;&amp;emsp;&amp;emsp;Conda是一个开源的软件包管理系统和环境管理系统。使用Conda有利于我们对安装的软件进行版本管理。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Conda" scheme="https://www.fawninmyheart.top/tags/Conda/"/>
    
  </entry>
  
  <entry>
    <title>Hexo搭建个人博客</title>
    <link href="https://www.fawninmyheart.top/blog/"/>
    <id>https://www.fawninmyheart.top/blog/</id>
    <published>2024-07-18T01:33:46.000Z</published>
    <updated>2024-08-21T08:40:44.359Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;<a href="https://hexo.io/zh-cn/docs/">Hexo</a>是一个快速、简洁且高效的博客框架。本文记录了建立本站时遇到的各种问题。</p><span id="more"></span><h3 id="Hexo安装"><a href="#Hexo安装" class="headerlink" title=" Hexo安装 "></a><font face="Lato" size=5> Hexo安装 </font></h3><h4 id="本地linux配置"><a href="#本地linux配置" class="headerlink" title=" 本地linux配置 "></a><font face="Lato" size=4> 本地linux配置 </font></h4><h5 id="安装依赖"><a href="#安装依赖" class="headerlink" title=" 安装依赖 "></a><font face="Lato" size=3> 安装依赖 </font></h5><p>Hexo的运行依赖于<a href="https://nodejs.org/zh-cn/download/package-manager">Node.js</a>和<a href="http://git-scm.com/">Git</a>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># installs nvm (Node Version Manager)</span></span><br><span class="line">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export NVM_DIR=&quot;$HOME/.nvm&quot;&#x27;</span> &gt;&gt;~/.zshrc</span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br><span class="line"><span class="comment"># download and install Node.js (you may need to restart the terminal)</span></span><br><span class="line">nvm install 22</span><br><span class="line"><span class="comment"># verifies the right Node.js version is in the environment</span></span><br><span class="line">node -v <span class="comment"># should print `v22.6.0`</span></span><br><span class="line"><span class="comment"># verifies the right NPM version is in the environment</span></span><br><span class="line">npm -v <span class="comment"># should print `10.8.2`</span></span><br></pre></td></tr></table></figure><h5 id="Hexo安装-1"><a href="#Hexo安装-1" class="headerlink" title=" Hexo安装 "></a><font face="Lato" size=3> Hexo安装 </font></h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装Hexo</span></span><br><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>Mac上安装hexo会产生如下错误：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">npm error code EEXIST</span><br><span class="line">npm error syscall <span class="built_in">mkdir</span></span><br><span class="line">npm error path /Users/shenhua/.npm/_cacache/content-v2/sha512/7e/33</span><br><span class="line">npm error errno EEXIST</span><br><span class="line">npm error Invalid response body <span class="keyword">while</span> trying to fetch https://registry.npmjs.org/abbrev: EACCES: permission denied, <span class="built_in">mkdir</span> <span class="string">&#x27;/Users/shenhua/.npm/_cacache/content-v2/sha512/7e/33&#x27;</span></span><br><span class="line">npm error File exists: /Users/shenhua/.npm/_cacache/content-v2/sha512/7e/33</span><br><span class="line">npm error Remove the existing file and try again, or run npm</span><br><span class="line">npm error with --force to overwrite files recklessly.</span><br><span class="line">npm error A complete <span class="built_in">log</span> of this run can be found <span class="keyword">in</span>: /Users/shenhua/.npm/_logs/2024-08-11T11_51_55_560Z-debug-0.log</span><br></pre></td></tr></table></figure><p>这个错误是EACCES权限问题，请遵循 <a href="https://docs.npmjs.com/resolving-eacces-permissions-errors-when-installing-packages-globally">由 npmjs 发布的指导</a> 修复该问题：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个npm全局安装目录</span></span><br><span class="line"><span class="built_in">mkdir</span> ~/.npm-global</span><br><span class="line"><span class="comment"># 配置npm目录到新的全局安装目录</span></span><br><span class="line">npm config <span class="built_in">set</span> prefix <span class="string">&#x27;~/.npm-global&#x27;</span></span><br><span class="line"><span class="comment"># 创建或者打开 ~/.zshrc 文件，并添加以下命令</span></span><br><span class="line">excho <span class="string">&quot;export PATH=~/.npm-global/bin:<span class="variable">$PATH</span>&quot;</span> &gt;&gt; ~/.zshrc</span><br><span class="line"><span class="comment"># 更新系统变量</span></span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br><span class="line"><span class="comment"># 安装Hexo</span></span><br><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><hr><h3 id="博客配置"><a href="#博客配置" class="headerlink" title=" 博客配置 "></a><font face="Lato" size=5> 博客配置 </font></h3><h4 id="初始化博客"><a href="#初始化博客" class="headerlink" title=" 初始化博客 "></a><font face="Lato" size=4> 初始化博客 </font></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init myblog</span><br><span class="line"><span class="built_in">cd</span> myblog</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><h4 id="菜单栏图标"><a href="#菜单栏图标" class="headerlink" title=" 菜单栏图标 "></a><font face="Lato" size=4> 菜单栏图标 </font></h4><p>可以调用<a href="https://fontawesome.com/search?p=4&o=r&m=free">Font Awesome</a>中的图标。在主题的配置文件中，找到menu模块，在“||”后引用图标。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || fa fa-home</span><br><span class="line">  sketch: sketch/ || fa fa-pen</span><br><span class="line">  travel: travel/ || fa fa-archive</span><br></pre></td></tr></table></figure><hr><h3 id="发布博客"><a href="#发布博客" class="headerlink" title=" 发布博客 "></a><font face="Lato" size=5> 发布博客 </font></h3><p>上面我们已经在本地建立了自己的博客环境（即使用“hexo init”初始化了的那个文件夹），下面就可以开始编辑我们的博客了。</p><blockquote>  <font face="Lato" size=3>    <p>      <i>这里建议大家不要把大文件和原始分辨率的图片放到这个文件夹里面。因为我们通常会使用git来管理这个文件夹，由于git会保存这个文件夹的所有历史记录，所以我们放入这个文件夹的大文件会被记录到“.git”文件夹中，即使之后将这些大文件删除了，也不会影响“.git”中备份的文件，导致“.git”文件夹体积过于庞大，不利于我们在远程仓库中管理这个文件夹。对于我们需要在文章中引用的图片，我们建议使用图床服务进行处理，后文中我们会介绍如何使用Github配置一个我们自己的图床。</i>    </p>  </font></blockquote><hr><h3 id="Hexo部署"><a href="#Hexo部署" class="headerlink" title=" Hexo部署 "></a><font face="Lato" size=5> Hexo部署 </font></h3><p>将Hexo静态网站部署到公共服务器</p><h4 id="方法一、Github-Pages-部署"><a href="#方法一、Github-Pages-部署" class="headerlink" title=" 方法一、Github Pages 部署 "></a><font face="Lato" size=4> 方法一、Github Pages 部署 </font></h4><p>  <a target="_blank" rel="noopener" href="https://pages.github.com/">Github Pages</a>是Github提供的静态网站免费托管服务。通过它，我们可以直接从自己的Github仓库读取并部署网站，而不需要购买额外的服务器资源。</p><p>  &emsp;&emsp;在上文中我们已经通过“hexo clean && hexo g && hexo server --static”命令在本地服务器上运行了我们的博客站点。在这个过程中，本地服务器依赖于“./public”文件夹下的内容，生成了我们的个人博客页面。而利用Github Pages部署网站的过程就相当于将“./public”文件夹中的数据推送到我们的Github仓库中。这个操作可以通过“<strong>hexo d</strong>”命令实现。</p><ol>  <li>    <p>创建一个用于博客发布的Github仓库，并开启Pages服务</p>    <p>      &emsp;&emsp;首先登录我们的Github账户，新建一个<strong>公开</strong>仓库。仓库的名字请按照这个格式设置“&lt;username&gt;.github.io”，如下图所示，以Github账户名为前缀，“.github.io”为后缀作为新仓库的名字。这样，我们博客的初始域名就是“&lt;username&gt;.github.io”，否则，博客的初始域名可能就是“&lt;username&gt;.github.io/仓库名”，后面多了一个仓库路径，而且hexo的config没有设置好的话连css文件都无法正常加载。    </p>    <img src="/blog/github_pages_name.png" title="仓库名设置" alt="图片加载失败" />    <p>      &emsp;&emsp;新仓库创建完成后进入Settings页面，查看Pages服务，当页面显示出“Your site is live at &lt;username&gt;.github.io”后，Pages服务就成功打开了。    </p>    <img src="/blog/github_pages_run.png" title="pages网址" alt="图片加载失败" />    <blockquote>      <font face="Lato" size=3>        <p>          （这里我已经配置了个人域名，所以直接显示了我的个人域名。如果没有配置个人域名的话，图中默认应该显示“Your site is live at fawninmyheart.github.io”，在浏览器中输入网址“fawninmyheart.github.io”即可直接访问我的博客。）        </p>      </font>    </blockquote>  </li>  <li>    <p>在Hexo中配置Deployment参数</p>    <p>      &emsp;&emsp;仓库创建完成后就需要打开Hexo的配置文件，在“Deployment”模块中配置Github仓库的参数。打开“_config.yml”文件，找到“deploy:”模块，将刚刚创建的仓库地址放到“repository: ”后面，“type”设置为“git”，“branch”设置为“main”。    </p>    <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repository: git@github.com:fawninmyheart/fawninmyheart.github.io.git</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure>  </li>  <li>    <p>上传“./public”文件夹中的内容上传到Github</p>    <p>&emsp;&emsp;完成Hexo的Deployment配置后，就可以使用“hexo d”命令将“./public”文件夹中的网站数据部署到刚刚新建的Github仓库中。</p>    <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">(base) root:~/blog/myblog$ hexo d</span><br><span class="line">/usr/local/lib/node_modules/hexo-cli/bin</span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  Deploying: git</span><br><span class="line">INFO  Clearing .deploy_git folder...</span><br><span class="line">INFO  Copying files from public folder...</span><br><span class="line">INFO  Copying files from extend <span class="built_in">dirs</span>...</span><br><span class="line">[master 5b559ed] Site updated: 2024-07-25 17:16:48</span><br><span class="line">6 files changed, 36 insertions(+), 18 deletions(-)</span><br><span class="line">Enumerating objects: 19, <span class="keyword">done</span>.</span><br><span class="line">Counting objects: 100% (19/19), <span class="keyword">done</span>.</span><br><span class="line">Delta compression using up to 12 threads</span><br><span class="line">Compressing objects: 100% (9/9), <span class="keyword">done</span>.</span><br><span class="line">Writing objects: 100% (10/10), 2.18 KiB | 1.09 MiB/s, <span class="keyword">done</span>.</span><br><span class="line">Total 10 (delta 7), reused 0 (delta 0), pack-reused 0</span><br><span class="line">remote: Resolving deltas: 100% (7/7), completed with 7 <span class="built_in">local</span> objects.</span><br><span class="line">To github.com:fawninmyheart/fawninmyheart.github.io.git</span><br><span class="line">  e9a6ebe..5b559ed  HEAD -&gt; main</span><br><span class="line">branch <span class="string">&#x27;master&#x27;</span> <span class="built_in">set</span> up to track <span class="string">&#x27;git@github.com:fawninmyheart/fawninmyheart.github.io.git/main&#x27;</span>.</span><br><span class="line">INFO  Deploy <span class="keyword">done</span>: git</span><br></pre></td></tr></table></figure>    <p>&emsp;&emsp;完成部署后就可以打开Pages服务指向的网址查看我们的博客。期间可能会有一些延迟，可以等几分钟再试着查看。</p>  </li></ol><h4 id="方法二、Github-源代码托管-Cloudfare-Pages-部署"><a href="#方法二、Github-源代码托管-Cloudfare-Pages-部署" class="headerlink" title=" 方法二、Github 源代码托管 + Cloudfare Pages 部署 "></a><font face="Lato" size=4> 方法二、Github 源代码托管 + Cloudfare Pages 部署 </font></h4><hr><h3 id="配置个人域名"><a href="#配置个人域名" class="headerlink" title=" 配置个人域名 "></a><font face="Lato" size=5> 配置个人域名 </font></h3><p>  <font face="Lato" size=4>    通过上文中的操作，我们已经可以直接通过“&lt;username&gt;.github.io”访问我们的博客了，但是默认的Github域名无法被收录进百度，也无法用来配置CDN服务。所以我们建议购买一个自己的域名，然后将这个域名解析到“&lt;username&gt;.github.io”上。  </font>  <blockquote>    <font face="Lato" size=3>      <i>因为我是用的Cloudflare来配置CDN的，期间需要修改域名的DNS解析服务器，但是我们无法修改Github域名的DNS服务器。当然我的了解有限，可能也存在直接配置Github域名的CDN服务的方法，以后如果看到再说。</i>    </font>  </blockquote></p><h4 id="域名购买和解析"><a href="#域名购买和解析" class="headerlink" title=" 域名购买和解析 "></a><font face="Lato" size=4> 域名购买和解析 </font></h4><font face="Lato" size=4>  <p>    &emsp;&emsp;以阿里云为例。购买域名后（需完成实名制），点击解析，添加两条记录。其中CNAME中记录了需要指向的域名（<i>&lt;username&gt;.github.io</i>），另一个解析记录则允许你使用“&lt;购买的域名&gt;”跳转到CNAME对应的域名（ip地址可以直接通过ping &lt;username&gt;.github.io获得）。  </p>  <p>    &emsp;&emsp;举个例子来说，以下图中的内容完成域名解析，则域名“<i>www.fawninmyheart.top</i>”（CNAME记录）可以直接指向“<i>fawninmyheart.github.io</i>”；而“<i>fawninmyheart.top</i>”则会先跳转到“<i>www.fawninmyheart.top</i>”（并返回返回码301），再进一步指向“<i>fawninmyheart.github.io</i>”。  </p></font><img src="/blog/CNAME_resolution.png" title="域名CNAME解析" alt="图片加载失败" style="zoom:27%; display: inline; margin-right: 2px;" /><img src="/blog/resolution.png" title="域名解析" alt="图片加载失败" style="zoom:27%; display: inline; margin-left: 2px;" /><blockquote>  <p>    <font face="Lato" size=3>      需要注意的是，其中CNAME记录的主机记录一定要设置为“www”，从而直接使用“www.<购买的域名>”指向Github。如果CNAME记录的主机记录设置为“@”，则表示使用“<购买的域名>”指向Github。这种情况下，域名无法被添加到百度资源搜索平台。即使在另一条解析记录中将主机记录设置为“www”，即令“www.<购买的域名>”跳转到“<购买的域名>”，也会因为“www.<购买的域名>”的返回码为301，导致该域名无法通过百度资源搜索平台最后的网页验证。    </font>  </p></blockquote><h4 id="在Hexo中配置个人域名"><a href="#在Hexo中配置个人域名" class="headerlink" title=" 在Hexo中配置个人域名 "></a><font face="Lato" size=4> 在Hexo中配置个人域名 </font></h4><font face="Lato" size="4">  <p>    &emsp;&emsp;进入我们之前建立的博客环境，找到“source”文件夹，在里面建立一个“CNAME”文件，没有任何后缀。然后将“www.&lt;购买的域名&gt;”写入这个文件中。最后通过“hexo clean && hexo g”命令，重新生成站点数据。成功生成后使用“hexo d”命令将站点数据推送到Github仓库即可。  </p></font><img src="/blog/CNAME.png" title="CNMAE" alt="图片加载失败" /><hr><h3 id="Hexo加速"><a href="#Hexo加速" class="headerlink" title=" Hexo加速 "></a><font face="Lato" size=5> Hexo加速 </font></h3><p>由于国内对Github进行了DNS污染，限制了我们托管在Github Pages上的网页的加载速度，所以我们可以通过CDN服务加速我们的博客加载速度。</p><h4 id="网页加载优化"><a href="#网页加载优化" class="headerlink" title=" 网页加载优化 "></a><font face="Lato" size=4> 网页加载优化 </font></h4><font face="Lato" size=4>  <p>    &emsp;&emsp;<a target="_blank" rel="noopener" href="https://www.cloudflare-cn.com/">Cloudflare</a>是一家向用户提供全球CDN节点以及DNS服务的公司。其在中国也有CDN服务器，并且还提供了个人学习用的免费套餐，可以满足个人博客的使用。（此方法需要已经为博客配置过个人域名）  <blockquote>    <font face="Lato" size="3">      CDN的全称是Content Delivery Network，即内容分发网络，是由代理服务器及其数据中心组成的地理分布式网络。CDN系统能够实时地根据网络流量和各节点的连接、负载状况以及到用户的距离和响应时间等综合信息将用户的请求重新导向离用户最近的服务节点上。其目的是使用户可就近取得所需内容，解决Internet网络拥挤的状况，提高用户访问网站的响应速度。    </font>  </blockquote>  </p></font><font face="Lato" size=4>  <p>    &emsp;&emsp;之前我们已经给博客配置了个人域名。在此基础上，我们可以将个人域名所请求的博客站点资源缓存到Cloudflare的CDN服务器上。之后当我们通过个人域名加载博客站点时，CDN就会返回一个对我们来说网路最优的服务器，从而提高了站点加载速度。下面将介绍如何使用Cloudflare的CDN服务。    <blockquote>      <font face="Lato" size="3">        <i>注意: 本篇文章基于GitHub page，如果是依赖于国内服务器的网站的话，最好不要套 Cloudflare，可能会使得访问速度变得更慢。</i>      </font>    </blockquote>  </p>  <p>    &emsp;&emsp;首先需要在Cloudflare注册一个账户。  </p></font><h4 id="图片加载优化"><a href="#图片加载优化" class="headerlink" title=" 图片加载优化 "></a><font face="Lato" size=4> 图片加载优化 </font></h4><font face="Lato" size=4>  <p>    jsDelivr/Chinajsdelivr CDN加速图片  </p></font><hr><h3 id="站点收录"><a href="#站点收录" class="headerlink" title=" 站点收录 "></a><font face="Lato" size=5> 站点收录 </font></h3><p>将个人博客收录到各个搜索平台中(百度、Bing、Google)</p><h4 id="百度"><a href="#百度" class="headerlink" title=" 百度 "></a><font face="Lato" size=4> 百度 </font></h4><font face="Lato" size=4>  <p>    &emsp;&emsp;可以通过<a target="_blank" rel="noopener" href="https://ziyuan.baidu.com/">百度资源搜索平台</a>将博客收录进百度。（使用github Pages服务发布的博客需要准备一个自己的域名用以跳转到自己博客，百度不能直接收录github站点）  </p>  <p>    &emsp;&emsp;打开百度资源搜索平台，登录并完成实名制。点击“用户中心”-“站点管理”，点击添加网站。输入“www.&lt;购买的域名>&gt;”；配置站点属性；选择第一个文件验证，将下载下来的源文件放到个人博客在github的根目录下，完成验证。  </p></font><h4 id="Bing"><a href="#Bing" class="headerlink" title=" Bing "></a><font face="Lato" size=4> Bing </font></h4><font face="Lato" size="4">  <p>    &emsp;&emsp;使用<a target="_blank" rel="noopener" href="https://www.bing.com/webmasters/home">Bing Webmaster Tools</a>将“<i>&lt;username&gt;.github.io</i>”添加到Bing中。点击添加网站；输入<i>&lt;username&gt;.github.io</i>到手动添加网站中；下载验证文件并放入github博客根目录中，完成验证。  </p></font><h4 id="Google"><a href="#Google" class="headerlink" title=" Google "></a><font face="Lato" size=4> Google </font></h4><h3 id="添加评论区"><a href="#添加评论区" class="headerlink" title=" 添加评论区 "></a><font face="Lato" size=5> 添加评论区 </font></h3><h4 id="giscus"><a href="#giscus" class="headerlink" title=" giscus "></a><font face="Lato" size=4> giscus </font></h4><p>  <font font="Lato" size="3">    <a href="https://giscus.app/">Giscus</a> 允许你将 GitHub Discussions 集成到你的网站上作为评论系统。这样做的好处是评论数据存储在 GitHub 上，不需要第三方服务。  </font>  <font font="Lato" size="3">    首先安装next的giscus (<a href="https://github.com/next-theme/hexo-next-giscus/">hexo-next-giscus</a>)：  </font>  <font font="Lato" size="3">    <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-next-giscus</span><br></pre></td></tr></table></figure>  </font>  <font font="Lato" size="3">    新建github仓库：  </font>  <img src="/blog/comment/new_repository.png" title="新建仓库" alt="图片加载失败" style="zoom:90%;" />  <font font="Lato" size="3">    github仓库启用Discussions功能 settings->General->Features:  </font>  <img src="/blog/comment/discussion.png" title="新建仓库" alt="图片加载失败" style="zoom:90%;" />  <font font="Lato" size="3">    点击链接安装gisacus https://github.com/apps/giscus  </font>  <img src="/blog/comment/app.png" title="新建仓库" alt="图片加载失败" style="zoom:90%;" />  <font font="Lato" size="3">    然后根据官网提示填写对应信息:  </font>  <img src="/blog/comment/configure.png" title="新建仓库" alt="图片加载失败" style="zoom:90%;" />  <font font="Lato" size="3">    然后就能获取到repo-id等相关信息:  </font>  <img src="/blog/comment/repo_id.png" title="新建仓库" alt="图片加载失败" style="zoom:90%;" />  <font font="Lato" size="3">    修改_config.fluid.yml文件:  </font>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">giscus:</span><br><span class="line">repo: xxxx/xxxx</span><br><span class="line">repo-id: xxxx</span><br><span class="line">category: Announcements</span><br><span class="line">category-id: xxxx</span><br><span class="line"><span class="comment"># Available values: pathname | url | title | og:title</span></span><br><span class="line">mapping: pathname</span><br><span class="line"><span class="comment"># Available values: 0 | 1</span></span><br><span class="line">reactions-enabled: 1</span><br><span class="line"><span class="comment"># Available values: 0 | 1</span></span><br><span class="line">emit-metadata: 0</span><br><span class="line"><span class="comment"># Available values: light | dark | dark_high_contrast | transparent_dark | preferred-color-scheme</span></span><br><span class="line">theme: preferred_color_scheme</span><br><span class="line"><span class="comment"># Available values: en | zh-CN</span></span><br><span class="line">lang: zh-CN</span><br><span class="line"><span class="comment"># Place the comment box above the comments</span></span><br><span class="line">input-position: top</span><br></pre></td></tr></table></figure></p><h3 id="支持数学公式"><a href="#支持数学公式" class="headerlink" title="支持数学公式"></a><a href="https://zhuanlan.zhihu.com/p/660317970">支持数学公式</a></h3><p>hexo默认不支持latex，需要安装额外插件，如<a href="https://link.zhihu.com/?target=https://github.com/next-theme/hexo-filter-mathjax">hexo-filter-mathjax</a>，可以使用$符号来标注内嵌的latex段。</p><blockquote><p><a href="https://blog.csdn.net/xiaoyuting999/article/details/135077406">Latex符号</a></p></blockquote><p>安装hexo-filter-mathjax</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-filter-mathjax</span><br></pre></td></tr></table></figure><p>编辑hexo站点根目录的 _config.yml，开启mathjax并添加配置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">math:</span><br><span class="line">  <span class="comment"># Default (false) will load mathjax / katex script on demand.</span></span><br><span class="line">  <span class="comment"># That is it only render those page which has `mathjax: true` in front-matter.</span></span><br><span class="line">  <span class="comment"># If you set it to true, it will load mathjax / katex script EVERY PAGE.</span></span><br><span class="line">  every_page: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  mathjax:</span><br><span class="line">    <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Available values: none | ams | all</span></span><br><span class="line">    tags: none</span><br><span class="line"></span><br><span class="line">mathjax:</span><br><span class="line">  tags: none <span class="comment"># or &#x27;ams&#x27; or &#x27;all&#x27;</span></span><br><span class="line">  single_dollars: <span class="literal">true</span> <span class="comment"># enable single dollar signs as in-line math delimiters</span></span><br><span class="line">  cjk_width: 0.9 <span class="comment"># relative CJK char width</span></span><br><span class="line">  normal_width: 0.6 <span class="comment"># relative normal (monospace) width</span></span><br><span class="line">  append_css: <span class="literal">true</span> <span class="comment"># add CSS to pages rendered by MathJax</span></span><br><span class="line">  every_page: <span class="literal">false</span> <span class="comment"># if true, every page will be rendered by MathJax regardless the `mathjax` setting in Front-matter</span></span><br><span class="line">  packages: <span class="comment"># extra packages to load</span></span><br><span class="line">  extension_options: &#123;&#125;</span><br><span class="line">    <span class="comment"># you can put your extension options here</span></span><br><span class="line">    <span class="comment"># see http://docs.mathjax.org/en/latest/options/input/tex.html#tex-extension-options for more detail</span></span><br></pre></td></tr></table></figure><p>默认配置唯一需要关注的是every_page: false，表示只对Front-matter中包含mathjax使能的文件进行latex处理。如果大部分文件包含公式，将every_page设置为true就不用修改文件单独使能了。</p><p>在文章内打开mathjax：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: On the Electrodynamics of Moving Bodies</span><br><span class="line">categories: Physics</span><br><span class="line">date: 1905-06-30 12:00:00</span><br><span class="line">mathjax: true</span><br><span class="line">---</span><br></pre></td></tr></table></figure><hr><h3 id="bug修复"><a href="#bug修复" class="headerlink" title=" bug修复 "></a><font face="Lato" size=5> bug修复 </font></h3><font face="Lato" size="3">  <ol>    <li>      执行“npm install hexo-renderer-marked --save”时，进度卡在“npm install hexo-renderer-marked --save”。可以通过更改镜像地址修复：      <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### 使用新的镜像地址</span></span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npmmirror.com</span><br><span class="line">npm config get registry</span><br></pre></td></tr></table></figure>    </li>  </ol></font><!-- comment --><script src="https://giscus.app/client.js"        data-repo="fawninmyheart/blog_comment"        data-repo-id="R_kgDOMh0eTw"        data-category="Announcements"        data-category-id="DIC_kwDOMh0eT84Chh6Y"        data-mapping="pathname"        data-strict="0"        data-reactions-enabled="1"        data-emit-metadata="0"        data-input-position="top"        data-theme="preferred_color_scheme"        data-lang="zh-CN"        crossorigin="anonymous"        async></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;&amp;emsp;&amp;emsp;&lt;a href=&quot;https://hexo.io/zh-cn/docs/&quot;&gt;Hexo&lt;/a&gt;是一个快速、简洁且高效的博客框架。本文记录了建立本站时遇到的各种问题。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Blog" scheme="https://www.fawninmyheart.top/tags/Blog/"/>
    
    <category term="Hexo" scheme="https://www.fawninmyheart.top/tags/Hexo/"/>
    
    <category term="Node.js" scheme="https://www.fawninmyheart.top/tags/Node-js/"/>
    
    <category term="Github Pages" scheme="https://www.fawninmyheart.top/tags/Github-Pages/"/>
    
    <category term="CDN" scheme="https://www.fawninmyheart.top/tags/CDN/"/>
    
    <category term="Giscus" scheme="https://www.fawninmyheart.top/tags/Giscus/"/>
    
  </entry>
  
  <entry>
    <title>Markdown</title>
    <link href="https://www.fawninmyheart.top/Markdown/"/>
    <id>https://www.fawninmyheart.top/Markdown/</id>
    <published>2024-07-11T06:34:09.000Z</published>
    <updated>2024-08-16T04:42:56.294Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;Markdown是编写Hexo博文的标准语法，本文介绍了常用的Markdown语法，帮助新用户快速入门。后期用户还需学习html语言，可以更好地控制页面地展示效果。</p><span id="more"></span><h3 id="标题级别"><a href="#标题级别" class="headerlink" title="标题级别"></a>标题级别</h3><p>可以使用“#”数量表示标题级别</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一级标题</span></span><br><span class="line"><span class="comment">## 二级标题</span></span><br><span class="line"><span class="comment">### 三级标题</span></span><br><span class="line"><span class="comment">#### 四级标题</span></span><br><span class="line"><span class="comment">##### 五级标题</span></span><br><span class="line"><span class="comment">###### 六级标题</span></span><br></pre></td></tr></table></figure><h3 id="文字格式"><a href="#文字格式" class="headerlink" title="文字格式"></a>文字格式</h3><h4 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h4><p>斜体：<em>斜体文字</em><br>粗体：<strong>粗体文字</strong><br>粗斜体：<em><strong>粗斜体文字</strong></em><br>删除线：<del>删除线</del><br>下划线：<u>下划线文本</u></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 斜体</span></span><br><span class="line">*斜体文字*</span><br><span class="line">_斜体文字_</span><br><span class="line"></span><br><span class="line"><span class="comment"># 粗体</span></span><br><span class="line">**粗体文字**</span><br><span class="line">__粗体文字__</span><br><span class="line"></span><br><span class="line"><span class="comment"># 粗斜体</span></span><br><span class="line">***粗斜体文字***</span><br><span class="line">___粗斜体文字___</span><br><span class="line"></span><br><span class="line"><span class="comment"># 其他</span></span><br><span class="line">~~删除线~~ <span class="comment"># 在文字两端添加两个波浪线`~~`</span></span><br><span class="line">&lt;u&gt;下划线&lt;/u&gt; <span class="comment"># 通过HTML标签实现, &lt;u&gt;下划线&lt;/u&gt;</span></span><br></pre></td></tr></table></figure><h4 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h4><p>可以在一行中用三个以上的“*”、“-”、“_”来建立一个分隔线，行内不能有其他东西，也可以在星号或减号蹭插入空格:</p><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">***</span><br></pre></td></tr></table></figure><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4><p>Markdown支持有序列表和无序列表，无序列表使用星号(*)、加号(+)或者减号(-)作为标记：</p><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* 第一项</span><br><span class="line">* 第二项</span><br><span class="line">* 第三项</span><br></pre></td></tr></table></figure><h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><ol><li>第一项</li><li>第二项</li><li>第三项</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 第一项</span><br><span class="line">2. 第二项</span><br><span class="line">3. 第三项</span><br></pre></td></tr></table></figure><h4 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h4><p>在子列表的选项前添加四个空格</p><ol><li>第一项：<ul><li>第一项嵌套的第一个元素</li><li>第一项嵌套的第二个元素</li></ul></li><li>第二项：<ul><li>第二项嵌套的第一个元素</li><li>第二项嵌套的第二个元素</li></ul></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. 第一项：</span><br><span class="line">    - 第一项嵌套的第一个元素</span><br><span class="line">    - 第一项嵌套的第二个元素</span><br><span class="line">2. 第二项：</span><br><span class="line">    - 第二项嵌套的第一个元素</span><br><span class="line">    - 第二项嵌套的第二个元素</span><br></pre></td></tr></table></figure><h4 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h4><p>在段落开头使用&gt;符号，然后后面紧跟一个空格符号。区块是可以嵌套的，一个&gt;符号是最外层，两个符号是第一层嵌套，以此类推。</p><blockquote><p>最外层</p><blockquote><p>第一层</p><blockquote><p>第二层</p></blockquote></blockquote></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; 最外层</span><br><span class="line">&gt;&gt; 第一层</span><br><span class="line">&gt;&gt;&gt; 第二层</span><br></pre></td></tr></table></figure><h5 id="列表区块互相嵌套"><a href="#列表区块互相嵌套" class="headerlink" title="列表区块互相嵌套"></a>列表区块互相嵌套</h5><ul><li>第一项<blockquote><p>Markdown教程<br>学的不仅是技术更是梦想</p></blockquote></li><li>第二项</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* 第一项</span><br><span class="line">    &gt; Markdown教程</span><br><span class="line">    &gt; 学的不仅是技术更是梦想</span><br><span class="line">* 第二项</span><br></pre></td></tr></table></figure><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><table><thead><tr><th>表头</th><th>表头</th><th>表头</th><th>表头</th><th>表头</th><th>表头</th></tr></thead><tbody><tr><td>(1,1)</td><td>(1,2)</td><td>(1,3)</td><td>(1,4)</td><td>(1,5)</td><td>(1,6)</td></tr><tr><td>(2,1)</td><td>(2,2)</td><td>(2,3)</td><td>(2,4)</td><td>(2,5)</td><td>(2,6)</td></tr><tr><td>(3,1)</td><td>(3,2)</td><td>(3,3)</td><td>(3,4)</td><td>(3,5)</td><td>(3,6)</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">|表头|表头|表头|表头|表头|表头|</span><br><span class="line">|---|---|---|---|---|---|</span><br><span class="line">|(1,1)|(1,2)|(1,3)|(1,4)|(1,5)|(1,6)|</span><br><span class="line">|(2,1)|(2,2)|(2,3)|(2,4)|(2,5)|(2,6)|</span><br><span class="line">|(3,1)|(3,2)|(3,3)|(3,4)|(3,5)|(3,6)|</span><br></pre></td></tr></table></figure><!-- comment --><script src="https://giscus.app/client.js"        data-repo="fawninmyheart/blog_comment"        data-repo-id="R_kgDOMh0eTw"        data-category="Announcements"        data-category-id="DIC_kwDOMh0eT84Chh6Y"        data-mapping="pathname"        data-strict="0"        data-reactions-enabled="1"        data-emit-metadata="0"        data-input-position="top"        data-theme="preferred_color_scheme"        data-lang="zh-CN"        crossorigin="anonymous"        async></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;&amp;emsp;&amp;emsp;Markdown是编写Hexo博文的标准语法，本文介绍了常用的Markdown语法，帮助新用户快速入门。后期用户还需学习html语言，可以更好地控制页面地展示效果。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Markdown" scheme="https://www.fawninmyheart.top/tags/Markdown/"/>
    
  </entry>
  
</feed>
